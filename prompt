Channel the essence of a Typescript SUPERcoder executing on the following list of task prompts. Ennsure clarity, precision, and thoroughness in each task prompt until fully feature complete.

task prompts:
*  Foundational Analysis: Commence a stringent audit of all the existing code and the src/globalSharedStyles.ts to align with CSS and UI paradigms while preserving core functionalities. Embark on a comprehensive review of src/globalSharedStyles.ts, ensuring its congruence with prevailing CSS and UI standards while staunchly safeguarding core functionalities. Use these Styles, CSS, and themes throughout the project and re-use them by importing globalSharedStyles. Preserve, extend, and augment existing code going forward
*  Foundational Analysis: Decode and integrate knowledge from BarkScanner_Use_Case_Flow.txt to conceptualize a user trajectory in src/screens/AddTree.tsx. Interpret and assimilate insights from BarkScanner_Use_Case_Flow.txt, meticulously crafting an uninterrupted user journey within src/screens/AddTree.tsx. All requirements were extrapolated and inferred from BarkScanner_Use_Case_Flow.txt. Infer the gaps between the existing code and the BarkScanner_Use_Case_Flow.txt in the context of what features are missing. You'll be extending, augmenting and updating this code base per the requirements. 
* UI Component Design: Extract necessary UI components from the requirements and identify common reusable and modular components. Isolate essential UI components from stipulated requirements, spotlighting those which are universally adaptable and modular in nature.
* UI Component Design: For each UI component, identify its properties and states. For every distinct UI component, pinpoint its inherent properties and dynamic states.
* UI Component Design: Design each component's visual layout considering responsive design. Tailor the aesthetic structure of each component, placing a premium on its adaptability across varying screen dimensions.
* UI Component Design: Create and implement CSS styles and themes for each component. Craft and embed distinctive CSS styles and thematic elements tailored to each component.
* UI Component Design: Ensure component compatibility across browsers and devices. Guarantee seamless functionality of each component across a spectrum of browsers and devices.
* Carousel Slider Implementation: Analyze the carousel slider requirements as per BarkScanner_Use_Case_Flow.txt. Delve deeply into the specifics of the carousel slider, referencing the detailed guidelines in BarkScanner_Use_Case_Flow.txt.
* Carousel Slider Implementation: Determine expected behaviors like auto-scrolling, manual navigation, and multi-image display. Define pivotal behaviors for the carousel, encompassing features like auto-scrolling, user-driven navigation, and concurrent multi-image presentation.
* Carousel Slider Implementation: Design the carousel with user experience in mind, ensuring smooth transitions, responsive design, touch gestures, and intuitive navigation. Craft a user-centric carousel design, emphasizing fluid transitions, adaptability across devices, intuitive touch gestures, and effortless navigation.
* Carousel Slider Implementation: If using an existing library, ensure its maintenance, compatibility, and community support. In the event of leveraging a pre-existing library, ascertain its ongoing maintenance, compatibility with current frameworks, and robust community backing.
* Carousel Slider Implementation: Decide on using an existing React Native library or developing a custom solution for the carousel slider. Choose between capitalizing on an established React Native library or architecting a bespoke carousel slider solution.
* UI Component Design: Conceive a React Native entity for the 'AddTree' screen including an Image Capturing Module for burst photography. Design a React Native module for the 'AddTree' interface, incorporating an advanced Image Capturing feature to enable burst photography.
* UI Component Design: Implement an Adjustment Slider to modulate image acquisition frequency. Develop a dynamic Adjustment Slider, empowering users to regulate the frequency of image captures effectively.
* UI Component Design: Enable Data Synthesis for real-time metrics from sensors and asynchronously archive images and data. Facilitate real-time Data Synthesis, drawing from sensors, and ensure asynchronous archiving of images and their associated metrics.
* UI Component Design: Include Activation Controls like 'Start' and 'Stop' switches with chronological indicators. Incorporate intuitive Activation Controls, notably the 'Start' and 'Stop' toggles, complemented with time-based indicators.
* UI Component Design: Create a Visual Archive to present stored imagery with data captions. Construct a comprehensive Visual Archive, showcasing saved images enriched with relevant data annotations.
* UI Component Design: Incorporate Command Triggers such as 'Save Sample' and 'Retake Sample'. Embed vital Command Triggers, specifically options like 'Save Sample' and 'Retake Sample', to enhance user interaction.
* UI Component Design: Implement a Geolocation Interface to show averaged arboreal geocoordinates. Develop a precise Geolocation Interface, visualizing the average geographical coordinates of tree samples.
* UI Component Design: Secure visuals with temporal markers, data, and metadata timestamps. Fortify image storage with temporal annotations, essential data points, and overarching metadata timestamps.
* UI Component Design: Design an Interaction Blueprint guiding from tree pinpointing to data storage. Draft a comprehensive Interaction Blueprint, charting the user journey from tree identification through to data archival.
* UI Component Design: Implement an FPS Slider's Memory Retention Mechanism. Integrate a robust Memory Retention Mechanism for the FPS Slider, ensuring optimal performance and user experience.
* UI Component Design: Ensure the 'AddTree' screen's confluence with Additional Modules. Guarantee seamless integration between the 'AddTree' interface and any supplementary modules.
* UI Component Design: Integrate a Framework with a Status Bar, App Header with icons, and primary content. Embed a cohesive Framework, comprising a Status Bar, an enriched App Header showcasing intuitive icons, and a dedicated zone for primary content.
* UI Component Design: Differentiate aesthetics based on mode preferences in Luminance Modes. Tailor aesthetics in Luminance Modes, allowing for dynamic visual changes based on user mode preferences.
* Carousel Slider Implementation: Analyze the carousel slider requirements as per BarkScanner_Use_Case_Flow.txt. Conduct a comprehensive review of carousel slider specifications as detailed in BarkScanner_Use_Case_Flow.txt, ensuring all requirements are well-understood.
* Carousel Slider Implementation: Determine expected behaviors like auto-scrolling, manual navigation, and multi-image display. Define and confirm the expected functionalities for the carousel slider, such as auto-scrolling capabilities, manual navigation options, and the display of multiple images simultaneously.
* Carousel Slider Implementation: Design the carousel with user experience in mind, ensuring smooth transitions, responsive design, touch gestures, and intuitive navigation. Craft an engaging carousel layout prioritizing user experience, with fluid transitions, adaptive design, interactive touch gestures, and user-friendly navigation.
* Carousel Slider Implementation: If using an existing library, ensure its maintenance, compatibility, and community support. In the event of leveraging an existing library for the carousel, validate its ongoing maintenance, compatibility with current tools, and the robustness of community backing.
* Carousel Slider Implementation: Decide on using an existing React Native library or developing a custom solution for the carousel slider. Evaluate the benefits of utilizing a pre-existing React Native library against the potential advantages of curating a bespoke solution for the carousel slider.
* UI Component Design: Conceive a React Native entity for the 'AddTree' screen including an Image Capturing Module for burst photography. Design a specialized React Native entity for the 'AddTree' interface, incorporating an advanced Image Capturing Module optimized for burst photography techniques.
* UI Component Design: Implement an Adjustment Slider to modulate image acquisition frequency. Integrate a precision Adjustment Slider, enabling users to fine-tune the frequency of image acquisition effortlessly.
* UI Component Design: Enable Data Synthesis for real-time metrics from sensors and asynchronously archive images and data. Institute a Data Synthesis mechanism to extract real-time metrics from embedded sensors, while ensuring asynchronous cataloging of images and their associated data.
* UI Component Design: Include Activation Controls like 'Start' and 'Stop' switches with chronological indicators. Embed intuitive Activation Controls, incorporating 'Start' and 'Stop' toggles, supplemented by time-based indicators to track activity duration.
* UI Component Design: Create a Visual Archive to present stored imagery with data captions. Establish a comprehensive Visual Archive, facilitating the display of stored images coupled with descriptive data captions, ensuring ease of access and understanding for users.
* UI Component Design: Incorporate Command Triggers such as 'Save Sample' and 'Retake Sample'. Integrate user-centric Command Triggers, prominently featuring options like 'Save Sample' and 'Retake Sample', for a seamless user experience.
* UI Component Design: Implement a Geolocation Interface to show averaged arboreal geocoordinates. Develop a dynamic Geolocation Interface, calibrated to display the averaged coordinates of trees, enhancing the accuracy and user experience.
* UI Component Design: Secure visuals with temporal markers, data, and metadata timestamps. Fortify the storage of visuals by integrating temporal markers, ensuring all images are enriched with relevant data and precise metadata timestamps.
* UI Component Design: Design an Interaction Blueprint guiding from tree pinpointing to data storage. Craft a detailed Interaction Blueprint that navigates users seamlessly from the initial tree identification phase right through to efficient data storage.
* UI Component Design: Implement an FPS Slider's Memory Retention Mechanism. Embed a robust Memory Retention Mechanism within the FPS Slider, ensuring it retains user settings and provides a consistent experience.
* UI Component Design: Ensure the 'AddTree' screen's confluence with Additional Modules. Guarantee that the 'AddTree' interface is in perfect harmony with any Additional Modules, promoting seamless integration and user navigation.
* UI Component Design: Integrate a Framework with a Status Bar, App Header with icons, and primary content. Incorporate a streamlined Framework, complete with a user-friendly Status Bar, an App Header adorned with intuitive icons, and a designated zone for primary content, ensuring a cohesive user experience.
* UI Component Design: Differentiate aesthetics based on mode preferences in Luminance Modes. Tailor the application aesthetics in Luminance Modes, adapting visuals based on user-selected mode preferences, such as light or dark themes, to enhance user comfort and experience.
* Carousel Slider Implementation: Analyze the carousel slider requirements as per BarkScanner_Use_Case_Flow.txt. Delve deep into the BarkScanner_Use_Case_Flow.txt to extract precise requirements for the carousel slider, ensuring its design aligns perfectly with user expectations.
* Carousel Slider Implementation: Determine expected behaviors like auto-scrolling, manual navigation, and multi-image display. Establish the desired behaviors for the carousel slider, focusing on functionalities such as seamless auto-scrolling, intuitive manual navigation, and the capability to showcase multiple images concurrently.
* Carousel Slider Implementation: Design the carousel with user experience in mind, ensuring smooth transitions, responsive design, touch gestures, and intuitive navigation. Craft the carousel with paramount focus on user engagement, prioritizing fluid transitions, adaptability across devices, touch-responsive gestures, and easy-to-understand navigation cues.
* Carousel Slider Implementation: If using an existing library, ensure its maintenance, compatibility, and community support. In the event of leveraging an existing library for the carousel, ascertain its regular maintenance, check its compatibility with current app infrastructure, and ensure it's backed by an active community for support.
* Carousel Slider Implementation: Decide on using an existing React Native library or developing a custom solution for the carousel slider. Evaluate the merits of employing an established React Native library against the benefits and flexibility of crafting a bespoke carousel slider solution.
* UI Component Design: Conceive a React Native entity for the 'AddTree' screen including an Image Capturing Module for burst photography. Design a dedicated React Native entity tailored for the 'AddTree' interface, enriched with an Image Capturing Module that excels in burst photography, ensuring users can effortlessly capture multiple images in quick succession.
* UI Component Design: Implement an Adjustment Slider to modulate image acquisition frequency. Integrate a user-friendly Adjustment Slider, empowering users to effortlessly modulate the frequency of image captures according to their preferences.
* UI Component Design: Enable Data Synthesis for real-time metrics from sensors and asynchronously archive images and data. Activate a Data Synthesis mechanism, capable of extracting real-time metrics from onboard sensors, while simultaneously archiving images and associated data in an asynchronous manner for optimized performance.
* UI Component Design: Include Activation Controls like 'Start' and 'Stop' switches with chronological indicators. Embed intuitive Activation Controls, specifically the 'Start' and 'Stop' toggles, complemented by clear chronological indicators, facilitating seamless user interactions during data capture sessions.
* UI Component Design: Create a Visual Archive to present stored imagery with data captions. Establish a sophisticated Visual Archive, designed to showcase stored images in an organized manner, each accompanied by pertinent data captions, enhancing user comprehension and recall.
* UI Component Design: Incorporate Command Triggers such as 'Save Sample' and 'Retake Sample'. Integrate user-centric Command Triggers, notably the 'Save Sample' and 'Retake Sample' options, ensuring users have full control over their data collection and modification actions.
* UI Component Design: Implement a Geolocation Interface to show averaged arboreal geocoordinates. Develop a precise Geolocation Interface, dedicated to displaying averaged tree-related geocoordinates, enhancing the spatial context and accuracy of data collected.
* UI Component Design: Secure visuals with temporal markers, data, and metadata timestamps. Fortify the visual assets with robust temporal markers, ensuring every piece of data is anchored with relevant metadata timestamps, thus enhancing data integrity and traceability.
* UI Component Design: Design an Interaction Blueprint guiding from tree pinpointing to data storage. Formulate a comprehensive Interaction Blueprint, charting the user's journey from the initial tree pinpointing phase right through to the conclusive data storage stage, ensuring a cohesive and intuitive experience.
* UI Component Design: Implement an FPS Slider's Memory Retention Mechanism. Embed a Memory Retention Mechanism within the FPS Slider, ensuring that user preferences and adjustments are retained across sessions, enhancing user convenience and system efficiency.
* UI Component Design: Ensure the 'AddTree' screen's confluence with Additional Modules. Harmonize the 'AddTree' interface, guaranteeing its seamless integration with any additional modules, ensuring a unified and consistent user experience.
* Carousel Slider Implementation: Ensure dynamic image loading for the carousel, especially for large datasets. Optimize the carousel slider to support dynamic image loading, prioritizing efficiency, especially when dealing with extensive image datasets, ensuring rapid and smooth user interactions.
* Carousel Slider Implementation: Implement lazy loading for just-in-time image rendering to enhance app responsiveness and reduce memory usage. Integrate a lazy loading mechanism into the carousel slider, strategically loading images just-in-time to boost application responsiveness and minimize memory consumption.
* Carousel Slider Implementation: Integrate zoom features for individual images if required. Embed a zoom functionality within the carousel slider, allowing users the flexibility to magnify individual images for a more detailed view when necessary.
* Carousel Slider Implementation: Allow annotations or captions for each image to provide context or additional information. Empower users with the capability to add annotations or captions to each image within the carousel, providing valuable context or supplementary information about the depicted tree sample.
* Carousel Slider Implementation: Implement swipe gestures for easy image navigation. Incorporate intuitive swipe gestures into the carousel slider, enabling users to effortlessly navigate between images, enhancing the overall interactive experience.

* Carousel Slider Implementation: Ensure seamless integration of the carousel with the 'Add Tree' screen, enabling users to view, add, or remove images as needed. Engineer a fluid integration of the carousel slider within the 'Add Tree' interface, ensuring users can effortlessly view, append, or delete images, optimizing user interaction and feature utility.
* Carousel Slider Implementation: Ensure data from the carousel, such as selected images or user annotations, is accurately saved and retrieved. Guarantee the precise storage and retrieval of data from the carousel, emphasizing the fidelity of selected images and user annotations, ensuring data consistency and reliability.
* Model Implementation: Parse requirements to identify feature behaviors. Methodically analyze requirements to discern distinct feature behaviors, ensuring a comprehensive understanding that lays the foundation for effective implementation.
* Model Implementation: Identify backend API calls and data handling for each feature. Determine the requisite backend API interactions and data management protocols for each feature, ensuring seamless and efficient data flow between the frontend and backend systems.
* Model Implementation: Develop business logic and functionalities for each feature. Craft robust business logic and accompanying functionalities tailored to each feature, ensuring they align with user needs and overarching system goals.
* Model Implementation: Ensure data validation, error handling, and feedback mechanisms. Institute rigorous data validation protocols, robust error handling strategies, and intuitive feedback mechanisms, bolstering system reliability and user trust.
* Model Implementation: Utilize React Native Expo SDK to craft or adapt a Tree Sample Collection tool, ensuring alignment with functionalities and UI cues. Harness the capabilities of the React Native Expo SDK to design or refine the Tree Sample Collection tool, ensuring it resonates with the established functionalities and UI guidelines.
* Subsequent Roadmap: Review the application flow for a smooth user journey. Conduct a thorough review of the application's flow, ensuring it offers users a seamless and intuitive journey from start to finish.
* Subsequent Roadmap: Identify and address potential bottlenecks or performance issues. Pinpoint and rectify any potential system bottlenecks or performance hindrances, ensuring the application operates at optimal efficiency.
* Subsequent Roadmap: Ensure user data protection with security measures. Implement robust security protocols to safeguard user data, ensuring data privacy and instilling user trust in the system.
* Subsequent Roadmap: Validate the solution against requirements for alignment. Rigorously assess the solution against the initial requirements, ensuring complete alignment and addressing any discrepancies.
* Data Handling and Backend Integration: Establish secure backend communication channels. Set up fortified communication channels with the backend, emphasizing security and efficiency, ensuring data integrity and rapid exchanges.
* Data Handling and Backend Integration: Sanitize, validate, and structure data according to schemas. Implement procedures to sanitize, validate, and structure incoming and outgoing data according to predefined schemas, bolstering data accuracy and system reliability.
* Data Handling and Backend Integration: Implement caching mechanisms for performance. Integrate advanced caching strategies to optimize system performance, ensuring swift data retrieval and reduced server load.
* Data Handling and Backend Integration: Develop error-handling strategies for data issues. Craft comprehensive error-handling mechanisms to address potential data discrepancies, ensuring system resilience and consistent user experience.
* Testing and Validation: Formulate unit tests for component functionality. Devise a suite of unit tests tailored to validate the functionality of each component, ensuring individual units operate flawlessly.
* Testing and Validation: Design integration tests for application harmony. Construct integration tests aimed at ensuring the seamless operation of interdependent system components, guaranteeing cohesive application behavior.
* Testing and Validation: Perform UAT with beta testers for real-world validation. Conduct User Acceptance Testing (UAT) with a curated group of beta testers, ensuring the system meets real-world expectations and performs optimally in diverse scenarios.
* Testing and Validation: Address any identified issues during testing phases. Promptly identify, analyze, and rectify any issues surfaced during testing, ensuring a bug-free and reliable final product.
* Feedback Integration and Iteration: Collect and prioritize feedback from testers and stakeholders. Gather invaluable feedback from testers and key stakeholders, prioritizing insights to inform iterative refinements and enhancements.
* Feedback Integration and Iteration: Iterate on UI/UX based on feedback. Continuously refine the UI/UX design based on user feedback, ensuring the interface remains intuitive, engaging, and user-centric.
* Deployment and Monitoring: Prepare for production deployment with correct configurations. Rigorous preparation for production deployment, ensuring all configurations are optimized for a live environment, guaranteeing a smooth launch.
* Deployment and Monitoring: Implement monitoring tools for performance tracking. Incorporate state-of-the-art monitoring tools to vigilantly track application performance, ensuring optimal operation and swift issue detection.
* Deployment and Monitoring: Set up real-time alert mechanisms for issues. Establish real-time alert systems to promptly notify of any potential issues, ensuring swift resolutions and minimal disruptions.
* Continuous Improvement: Analyze monitoring data for improvements. Continuously scrutinize monitoring data, deriving insights to drive system improvements and optimizations.
* Continuous Improvement: Stay updated with technology and industry standards. Consistently monitor technological advancements and industry best practices, ensuring the application remains cutting-edge and compliant.
* Continuous Improvement: Schedule review sessions with stakeholders and experts. Regularly convene review sessions with stakeholders and domain experts, leveraging their insights to steer ongoing improvements and feature enhancements.
* Continuous Improvement: Plan and execute periodic application updates. Strategically plan and roll out periodic application updates, ensuring the system evolves in tandem with user needs and technological advancements.
* Documentation and Knowledge Transfer: Document the development process and decisions. Comprehensively document every facet of the development process and the rationale behind decisions, ensuring clarity and future reference.
* Documentation and Knowledge Transfer: Ensure comprehensive code commenting. Maintain a standard of detailed code commentary, ensuring future developers can easily understand, maintain, and expand upon the existing codebase.
* Documentation and Knowledge Transfer: Conduct knowledge transfer sessions for future maintenance and enhancements. Organize thorough knowledge transfer sessions, equipping teams with the insights and understanding necessary for future system maintenance and enhancements.
* Subsequent Roadmap: Engage expert personas for a review and optimization. Solicit the expertise of domain specialists for a rigorous review, drawing on their insights for potential system optimizations and refinements.
* Carousel Slider Implementation: Conduct thorough testing of the carousel on various devices and screen sizes. Undertake exhaustive testing of the carousel slider across a spectrum of devices and screen dimensions, ensuring universal compatibility and optimal performance.
* Carousel Slider Implementation: Validate the carousel's performance, ensuring smooth functioning even with a high number of images. Critically assess the carousel's performance, ensuring it operates seamlessly even when handling a voluminous image dataset.
* Carousel Slider Implementation: Gather specific feedback on the carousel's usability and make necessary adjustments. Collect targeted feedback regarding the carousel's usability, iterating based on user insights to guarantee an optimal experience.
* Subsequent Roadmap: Deploy and monitor the system for stability and performance. Launch the system into a live environment, vigilantly monitoring its stability and performance to ensure uninterrupted and optimal operation.
*  Foundational Analysis: Execute a meticulous audit of src/globalSharedStyles.ts to ensure alignment with contemporary CSS and UI paradigms without compromising core functionalities.
*  Foundational Analysis: Decode and assimilate insights from BarkScanner_Use_Case_Flow.txt, establishing a seamless user trajectory within src/screens/AddTree.tsx.
* UI Component Design: Systematically extract required UI components from the specifications, emphasizing the identification of universally adaptable, modular components.
* UI Component Design: For every UI component, meticulously identify its intrinsic properties and states, ensuring holistic representation.
* UI Component Design: Craft each component's visual layout with a focus on responsive design principles, ensuring adaptability across devices.
* UI Component Design: Creatively design and implement distinctive CSS styles and themes for each component, enhancing visual appeal.
* UI Component Design: Envision and materialize a React Native entity for the 'AddTree' screen, accentuating features like an Image Capturing Module for dynamic burst photography.
